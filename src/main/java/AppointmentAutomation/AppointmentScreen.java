
package AppointmentAutomation;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Bilal
 */
public class AppointmentScreen extends javax.swing.JFrame {

    private DefaultListModel lst_doctorsModel;
    private String userName;
    private String userSurname;
    private String patientIdentificationNumber;
    private String doctorName;
    private String doctorSurname;
    private String appointmentDate;
    private String appointmentTime;
    private String complaint;
    private String department;
    private String id;
    private MainScreen mainScreen;
    private String userUserType;

    public AppointmentScreen() {
        initComponents();
        this.setLocationRelativeTo(null);

        //Assigning list model.
        lst_doctorsModel = new DefaultListModel();
        this.lst_doctors.setModel(lst_doctorsModel);
    }

    public AppointmentScreen(MainScreen mainScreen, boolean isNewAppointment, String userName, String userSurname, String patientIdentificationNumber, String selectedId, String userUserType) {
        initComponents();
        this.setTitle("Appointment Processes");
        this.setLocationRelativeTo(null);
        if (isNewAppointment) {
            this.rbtn_newAppointment.setSelected(true);
            txt_id.setEnabled(false);
        } else {
            this.rbtn_update.setSelected(true);
            txt_id.setEnabled(false);
            txt_id.setText(selectedId);
        }
        this.userName = userName;
        this.userSurname = userSurname;
        this.patientIdentificationNumber = patientIdentificationNumber;
        this.mainScreen = mainScreen;
        this.userUserType = userUserType;
        //Assigning list model.
        lst_doctorsModel = new DefaultListModel();
        this.lst_doctors.setModel(lst_doctorsModel);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btngrp_process = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        rbtn_update = new javax.swing.JRadioButton();
        rbtn_newAppointment = new javax.swing.JRadioButton();
        lbl_id = new javax.swing.JLabel();
        txt_id = new javax.swing.JTextField();
        lbl_process = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lst_department = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        lst_doctors = new javax.swing.JList<>();
        lbl_department = new javax.swing.JLabel();
        lbl_doctors = new javax.swing.JLabel();
        lbl_appointmentDate = new javax.swing.JLabel();
        lbl_day = new javax.swing.JLabel();
        spnr_day = new javax.swing.JSpinner();
        spnr_month = new javax.swing.JSpinner();
        lbl_month = new javax.swing.JLabel();
        lbl_year = new javax.swing.JLabel();
        spnr_year = new javax.swing.JSpinner();
        lbl_appintmentTime = new javax.swing.JLabel();
        spnr_hour = new javax.swing.JSpinner();
        lbl_timeDot = new javax.swing.JLabel();
        spnr_minute = new javax.swing.JSpinner();
        jScrollPane3 = new javax.swing.JScrollPane();
        txta_complaint = new javax.swing.JTextArea();
        lbl_complaint = new javax.swing.JLabel();
        btn_exit = new javax.swing.JButton();
        btn_apply = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        jPanel1.setBackground(new java.awt.Color(0, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Informations of Appointment", javax.swing.border.TitledBorder.RIGHT, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        btngrp_process.add(rbtn_update);
        rbtn_update.setText("Update");
        rbtn_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtn_updateActionPerformed(evt);
            }
        });

        btngrp_process.add(rbtn_newAppointment);
        rbtn_newAppointment.setText("New Appointment");
        rbtn_newAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtn_newAppointmentActionPerformed(evt);
            }
        });

        lbl_id.setText("ID:");

        lbl_process.setText("Process:");

        lst_department.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Cardiology", "Ear Nose and Throat", "Gastroenterology", "General Surgery", "Neurology", "Psychology", " " };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        lst_department.setMaximumSize(new java.awt.Dimension(150, 300));
        lst_department.setMinimumSize(new java.awt.Dimension(150, 300));
        lst_department.setPreferredSize(new java.awt.Dimension(150, 300));
        lst_department.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lst_departmentValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(lst_department);

        lst_doctors.setMaximumSize(new java.awt.Dimension(150, 300));
        lst_doctors.setMinimumSize(new java.awt.Dimension(150, 300));
        lst_doctors.setPreferredSize(new java.awt.Dimension(150, 300));
        jScrollPane2.setViewportView(lst_doctors);

        lbl_department.setText("Department:");

        lbl_doctors.setText("Doctors:");

        lbl_appointmentDate.setText("Appointment Date:");

        lbl_day.setText("Day:");

        spnr_day.setModel(new javax.swing.SpinnerNumberModel(1, 1, 31, 1));

        spnr_month.setModel(new javax.swing.SpinnerNumberModel(1, 1, 12, 1));

        lbl_month.setText("Month:");

        lbl_year.setText("Year:");

        spnr_year.setModel(new javax.swing.SpinnerNumberModel(2021, 2021, 2100, 1));

        lbl_appintmentTime.setText("Appointment Time:");

        spnr_hour.setModel(new javax.swing.SpinnerNumberModel(12, 1, 24, 1));

        lbl_timeDot.setText(":");

        spnr_minute.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));

        txta_complaint.setColumns(20);
        txta_complaint.setRows(5);
        jScrollPane3.setViewportView(txta_complaint);

        lbl_complaint.setText("Complaint:");

        btn_exit.setText("Exit");
        btn_exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_exitActionPerformed(evt);
            }
        });

        btn_apply.setText("Apply");
        btn_apply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_applyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lbl_process)
                        .addGap(18, 18, 18)
                        .addComponent(rbtn_update)
                        .addGap(18, 18, 18)
                        .addComponent(rbtn_newAppointment)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lbl_id)
                        .addGap(18, 18, 18)
                        .addComponent(txt_id, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(53, 53, 53)
                                .addComponent(lbl_department)
                                .addGap(97, 97, 97)
                                .addComponent(lbl_doctors))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(btn_exit, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btn_apply, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbl_appointmentDate)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(lbl_day)
                                        .addGap(32, 32, 32)
                                        .addComponent(spnr_day, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lbl_month)
                                            .addComponent(lbl_year))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(spnr_month, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(spnr_year, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(lbl_appintmentTime)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(spnr_hour, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(lbl_timeDot)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(spnr_minute, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE))
                            .addComponent(jScrollPane3)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(lbl_complaint)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addGap(23, 23, 23))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbtn_update)
                    .addComponent(rbtn_newAppointment)
                    .addComponent(lbl_id)
                    .addComponent(txt_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_process))
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_department)
                    .addComponent(lbl_doctors)
                    .addComponent(lbl_appointmentDate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spnr_day, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_day))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_month)
                            .addComponent(spnr_month, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_year)
                            .addComponent(spnr_year, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbl_appintmentTime)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spnr_hour, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_timeDot)
                            .addComponent(spnr_minute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbl_complaint)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_exit)
                    .addComponent(btn_apply))
                .addGap(22, 22, 22))
        );

        getContentPane().add(jPanel1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rbtn_newAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtn_newAppointmentActionPerformed
        txt_id.setEnabled(false);
    }//GEN-LAST:event_rbtn_newAppointmentActionPerformed

    private void rbtn_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtn_updateActionPerformed
        txt_id.setEnabled(false);
    }//GEN-LAST:event_rbtn_updateActionPerformed
    public void showDoctors(String department) {
        Connection conn = null;
        try {
            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/AppoinmentProgram", "sa", "as");
            String query = "SELECT NAME,SURNAME,DEPARTMENT FROM TBL_USERS WHERE DEPARTMENT ='" + department + "'";
            Statement stmt = conn.createStatement();
            ResultSet rst = stmt.executeQuery(query);
            while (rst.next()) {
                String doctorName = rst.getString("NAME") + " " + rst.getString("SURNAME");
                lst_doctorsModel.addElement(doctorName);
            }
            rst.close();
            stmt.close();
            conn.close();

        } catch (SQLException ex) {
            Logger.getLogger(LogIn.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(LogIn.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void lst_departmentValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lst_departmentValueChanged
        lst_doctorsModel.clear();//When new department is selected, doctors section is cleaned.
        String department = lst_department.getSelectedValue();
        showDoctors(department);

    }//GEN-LAST:event_lst_departmentValueChanged

    public String startWithZero(String input) {
        String deliver = "0";
        if (input.length() == 1) {
            deliver += input;
        } else {
            deliver = input;
        }
        return deliver;
    }
    private void btn_applyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_applyActionPerformed
        //All of user informations are created
        if(lst_department.isSelectionEmpty()||lst_doctors.isSelectionEmpty()){
            JOptionPane.showMessageDialog(this, "Please be sure to select a doctor and department");
            return;
        }       
        String department = lst_department.getSelectedValue();
        String id = txt_id.getText();
        String doctor = this.lst_doctors.getSelectedValue();//doctor has name and surname. This variable is seperated being name and surname. 
        String[] doctorNameSurname = doctor.split(" ");
        String doctorName = "";
        String doctorSurname = "";
        for (int i = 0; i < doctorNameSurname.length; i++) {//if doctor has 2 or more name...
            if (doctorNameSurname.length - 1 == i) {
                doctorSurname = doctorNameSurname[i];
            } else {
                doctorName += doctorNameSurname[i] + " ";

            }
        }
        doctorName = doctorName.trim();

        String day = this.startWithZero("" + spnr_day.getValue());
        String month = this.startWithZero("" + spnr_month.getValue());
        String hour = this.startWithZero("" + spnr_hour.getValue());
        String time = this.startWithZero("" + spnr_minute.getValue());

        String appointmentDate = "" + day + "/" + month + "/" + spnr_year.getValue();
        String appointmentTime = "" + hour + "." + time;
        String complaint = txta_complaint.getText();
        //Class variable is assingned.
        this.doctorName = doctorName;
        this.doctorSurname = doctorSurname;
        this.appointmentDate = appointmentDate;
        this.appointmentTime = appointmentTime;
        this.complaint = complaint;
        this.department = department;

        if (rbtn_newAppointment.isSelected()) {
            if(appointmentControl()){//this section control that doctor has appointment at the same day and time.
            return;
            }
            insertAppointment();
        } else {
            updateAppointment(id);
        }
    }//GEN-LAST:event_btn_applyActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        this.mainScreen.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_formWindowClosing

    private void btn_exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_exitActionPerformed
        this.mainScreen.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btn_exitActionPerformed
    public void updateAppointment(String id) {
        this.mainScreen.getTbl_appointmentsModel().setRowCount(0);
        Connection conn = null;
        try {
            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/AppoinmentProgram", "sa", "as");
            //biggest id is taken.
            Statement stmt = conn.createStatement();
            //The inputs are updated following
            String query = "UPDATE TBL_APPOINTMENTS "
                    + "SET DOCTOR_NAME = '" + this.doctorName + "',"
                    + "DOCTOR_SURNAME = '" + this.doctorSurname + "',"
                    + "APPOINTMENT_DATE = '" + this.appointmentDate + "',"
                    + "APPOINTMENT_TIME = '" + this.appointmentTime + "',"
                    + "DOCTOR_DEPARTMENT = '" + this.department + "',"
                    + "PATIENT_NAME = '" + this.userName + "',"
                    + "PATIENT_SURNAME = '" + this.userSurname + "',"
                    + "PATIENT_ID = '" + this.patientIdentificationNumber + "',"
                    + "COMPLAINT = '" + this.complaint + "' "
                    + "WHERE ID=" + id;
            stmt.executeUpdate(query);
            //User appointments is updated on table
            String name = this.userName;
            String surname = this.userSurname;
            boolean isStandartUser = this.userUserType.equals("Standart user");
            boolean isDoctor = this.userUserType.equals("Doctor");
            this.mainScreen.showAppointments(name, surname, isStandartUser, isDoctor);

            conn.close();
            JOptionPane.showMessageDialog(this, "The appointment is successfully updated. You can continue from main screen.");
        } catch (SQLException ex) {
            Logger.getLogger(LogIn.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(LogIn.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.setVisible(false);
    }

    public void insertAppointment() {
        Connection conn = null;
        try {
            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/AppoinmentProgram", "sa", "as");
            //biggest id is taken.
            String query2 = "SELECT MAX (ID) FROM TBL_APPOINTMENTS";
            Statement stmt = conn.createStatement();
            ResultSet rst = stmt.executeQuery(query2);
            rst.next();
            this.id = Integer.toString(1 + rst.getInt(1));
            //The inputs are inserted following
            String query = "INSERT INTO TBL_APPOINTMENTS VALUES("
                    + id
                    + ",'" + this.doctorName + "'"
                    + ",'" + this.doctorSurname + "'"
                    + ",'" + this.appointmentDate + "'"
                    + ",'" + this.appointmentTime + "'"
                    + ",'" + this.department + "'"
                    + ",'" + this.userName + "'"
                    + ",'" + this.userSurname + "'"
                    + ",'" + this.patientIdentificationNumber + "'"
                    + ",'" + this.complaint + "')";
            stmt.executeUpdate(query);
            this.mainScreen.getTbl_appointmentsModel().addRow(new Object[]{id, doctorName, doctorSurname, appointmentDate,
                appointmentTime, department, userName, userSurname, patientIdentificationNumber, complaint});
            JOptionPane.showMessageDialog(this, "The appointment is successfully created. You can continue from main screen.");
        } catch (SQLException ex) {
            Logger.getLogger(LogIn.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(LogIn.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.setVisible(false);
    }
    public boolean appointmentControl(){
          Connection conn = null;
        try {
            conn = DriverManager.getConnection("jdbc:derby://localhost:1527/AppoinmentProgram", "sa", "as");
            //biggest id is taken.
            String query2 = "SELECT DOCTOR_NAME,APPOINTMENT_DATE,APPOINTMENT_TIME FROM TBL_APPOINTMENTS WHERE DOCTOR_NAME ='"+this.doctorName+"'";
            Statement stmt = conn.createStatement();
            ResultSet rst = stmt.executeQuery(query2);
            while(rst.next()){
                String appointmentDate = rst.getString("APPOINTMENT_DATE");
                String appointmentTime= rst.getString("APPOINTMENT_TIME");               
                if(appointmentDate.equals(this.appointmentDate)&& appointmentTime.equals(this.appointmentTime)){
                    JOptionPane.showMessageDialog(this, "Your appointment time is not suitable for doctor. Doctor has another appointment in this time");
                    stmt.close();
                    conn.close();
                    return true;
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(LogIn.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(LogIn.class.getName()).log(Level.SEVERE, null, ex);
        }
        return false;
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AppointmentScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AppointmentScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AppointmentScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppointmentScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AppointmentScreen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_apply;
    private javax.swing.JButton btn_exit;
    private javax.swing.ButtonGroup btngrp_process;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lbl_appintmentTime;
    private javax.swing.JLabel lbl_appointmentDate;
    private javax.swing.JLabel lbl_complaint;
    private javax.swing.JLabel lbl_day;
    private javax.swing.JLabel lbl_department;
    private javax.swing.JLabel lbl_doctors;
    private javax.swing.JLabel lbl_id;
    private javax.swing.JLabel lbl_month;
    private javax.swing.JLabel lbl_process;
    private javax.swing.JLabel lbl_timeDot;
    private javax.swing.JLabel lbl_year;
    private javax.swing.JList<String> lst_department;
    private javax.swing.JList<String> lst_doctors;
    private javax.swing.JRadioButton rbtn_newAppointment;
    private javax.swing.JRadioButton rbtn_update;
    private javax.swing.JSpinner spnr_day;
    private javax.swing.JSpinner spnr_hour;
    private javax.swing.JSpinner spnr_minute;
    private javax.swing.JSpinner spnr_month;
    private javax.swing.JSpinner spnr_year;
    private javax.swing.JTextField txt_id;
    private javax.swing.JTextArea txta_complaint;
    // End of variables declaration//GEN-END:variables
}
